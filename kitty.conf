# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Color scheme {{{
#background_image themes/blackboard-e1502478894337.png
#include new-moon.conf
#include themes/kitty_tokyonight_night.conf
#include themes/rose-pine.conf
include themes/kitty-ballerini.conf

#: whiteR

        mark1_foreground black

#: Color for marks of type 1

        mark1_background #98d3cb

#: Color for marks of type 1 (light steel blue)

        mark2_foreground black

#: Color for marks of type 2

        mark2_background #f2dcd3

#: Color for marks of type 1 (beige)

        mark3_foreground black

#: Color for marks of type 3

        mark3_background #f274bc

#: Color for marks of type 1 (violet)

#: }}}

#: Fonts {{{

#font_family Droid Sans Mono for Powerline Regular
#font_family JetBrains Mono

font_family CascadiaCodePL-Regular
#font_family VictorMono-Bold
#font_features VictorMono-Medium +ss01

bold_font        auto
italic_font      auto
bold_italic_font Monoid Nerd Font Mono
font_size 13.0
# %
adjust_line_height  0
adjust_column_width 0
# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols # symbol_map codepoints Font Family Name
disable_ligatures never
font_features none
# to thin, normal, thick, and very thick lines
box_drawing_scale 0.001, 1, 1.5, 2

#: }}}

#: Font sizes {{{

map kitty_mod+equal     change_font_size all 0
map kitty_mod+minus     change_font_size all -2.0
map kitty_mod+backspace change_font_size all +2.0
#:     map kitty_mod+f6 change_font_size all 10.0
#:     map kitty_mod+f6 change_font_size current 10.0

#: }}}

#: Cursor customization {{{

# from theme
#cursor
# cursor_text_color

# block, beam, underline
cursor_shape beam
cursor_beam_thickness 1.5
cursor_underline_thickness 2.0
cursor_blink_interval 1.0
cursor_stop_blinking_after 15.0

#: }}}

#: Scrollback {{{

scrollback_lines 5000
scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER
scrollback_pager_history_size 0
wheel_scroll_multiplier 5

#: }}}

#: Mouse {{{

# from theme
# url_color

# none, single, double, curly
# url_style curly

mouse_hide_wait 1.0
# open_url_modifiers kitty_mod
# open_url_with default
url_prefixes http https file ftp
# copy_on_select no
strip_trailing_spaces never
# rectangle_select_modifiers ctrl+alt
select_by_word_characters :@-./_~?&=%+#
# click_interval 0.5
# focus_follows_mouse no
pointer_shape_when_grabbed arrow

#: }}}

#: Performance tuning {{{

# repaint_delay 10
# input_delay 3
# sync_to_monitor yes

#: }}}

#: Terminal bell {{{
enable_audio_bell no
visual_bell_duration 0.50
window_alert_on_bell yes
bell_on_tab yes

#: }}}

#: Window layout {{{

# from theme (when possible)?
active_border_color #da4453
inactive_border_color #31363b
# bell_border_color

# remember_window_size  yes
# initial_window_width  640
# initial_window_height 400
enabled_layouts *
window_resize_step_cells 2
window_resize_step_lines 2
window_border_width 1
draw_minimal_borders yes
window_margin_width 2
single_window_margin_width 10
window_padding_width 20
placement_strategy center
inactive_text_alpha .8
hide_window_decorations no
resize_debounce_time 0.1
resize_draw_strategy static
resize_in_steps no
confirm_os_window_close 0

#: }}}

#: Tab bar {{{

# from theme
#tab_bar_background
#active_tab_foreground
#active_tab_background
#inactive_tab_foreground
#inactive_tab_background

# tab_bar_edge bottom
tab_bar_margin_width 14
tab_bar_min_tabs 2
tab_switch_strategy previous
# separator
tab_bar_style fade
# tab_fade 0.25 0.5 0.75 1
tab_fade 1 1 1
tab_separator " â”‡"
tab_title_template {index}: {pwd}
active_tab_title_template none
active_tab_font_style   bold-italic
inactive_tab_font_style normal

#: }}}

#: Advanced {{{

update_check_interval 24
# shell .
editor nvim
# close_on_child_death no
allow_remote_control yes
#listen_on none
# Listen via dedicated socket instead of tty
# https://github.com/kovidgoyal/kitty/issues/2426
listen_on unix:/tmp/mykitty
# startup_session none
# write-clipboard read-clipboard write-primary read-primary
#clipboard_control write-clipboard write-primary
# term xterm-kitty

# env

#: Specify environment variables to set in all child processes. Note
#: that environment variables are expanded recursively, so if you
#: use::

#:     env MYVAR1=a
#:     env MYVAR2=${MYVAR1}/${HOME}/b

#: The value of MYVAR2 will be a/<path to home directory>/b.

#: }}}

#: OS specific tweaks {{{

linux_display_server auto
# system, background
#macos_titlebar_color #22262d
# x11_hide_window_decorations no

#: }}}

#: Keyboard shortcuts {{{

#: For a list of key names, see: the GLFW key macros
#: <https://github.com/kovidgoyal/kitty/blob/master/glfw/glfw3.h#L349>.
#: The name to use is the part after the GLFW_KEY_ prefix. For a list
#: of modifier names, see: GLFW mods
#: <https://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you can only use an XKB key
#: name for keys that are not known as GLFW keys.

#: Finally, you can use raw system key codes to map keys, again only
#: for keys that are not known as GLFW keys. To see the system key
#: code for a key, start kitty with the kitty --debug-keyboard option.
#: Then kitty will output some debug text for every key event. In that
#: text look for ``native_code`` the value of that becomes the key
#: name in the shortcut. For example:

#: .. code-block:: none

#:     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

#: Here, the key name for the A key is 0x61 and you can use it with::

#:     map ctrl+0x61 something

#: to map ctrl+a to something.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration::

#:     map kitty_mod+space no_op

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below::

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example::

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below::

#:     map key1>key2>key3 action

#: For example::

#:     map ctrl+f>2 set_font_size 20

# kitty_mod ctrl+shift
# clear_all_shortcuts no

#: }}}

#: Clipboard {{{

map kitty_mod+c copy_to_clipboard
map kitty_mod+v  paste_from_clipboard
map kitty_mod+s  paste_from_selection
map shift+insert paste_from_selection
map kitty_mod+o  pass_selection_to_program
#:     map kitty_mod+o pass_selection_to_program firefox
#:     map kitty_mod+y new_window less @selection

#: }}}

#: Scrolling {{{

map kitty_mod+up        scroll_line_up
map kitty_mod+k         scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+j         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
map kitty_mod+h         show_scrollback

#:     map kitty_mod+y new_window @ansi less +G -R
#:     map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

#: }}}

#: Window management {{{

map kitty_mod+enter new_window_with_cwd
#:     map kitty_mod+y      new_window mutt
# map kitty_mod+n new_os_window
# map kitty_mod+w close_window
map kitty_mod+k previous_window
map kitty_mod+j next_window
map kitty_mod+up move_window_backward
map kitty_mod+down move_window_forward
# map kitty_mod+` move_window_to_top
map kitty_mod+r start_resizing_window
map kitty_mod+1 first_window
map kitty_mod+2 second_window
map kitty_mod+3 third_window
map kitty_mod+4 fourth_window
map kitty_mod+5 fifth_window
map kitty_mod+6 sixth_window
map kitty_mod+7 seventh_window
map kitty_mod+8 eighth_window
map kitty_mod+9 ninth_window
map kitty_mod+0 tenth_window
#: }}}

#: Tab management {{{

# map kitty_mod+right next_tab
# map kitty_mod+left  previous_tab
map alt+right next_tab
map alt+left  previous_tab
map kitty_mod+]       no_op
map kitty_mod+]       next_tab
map kitty_mod+[       no_op
map kitty_mod+[       previous_tab
# map kitty_mod+t     new_tab
# map kitty_mod+q     close_tab
# map kitty_mod+.     move_tab_forward
# map kitty_mod+,     move_tab_backward
map kitty_mod+right   no_op
map kitty_mod+right   move_tab_forward
map kitty_mod+left    no_op
map kitty_mod+left    move_tab_backward
# map kitty_mod+alt+t set_tab_title
map kitty_mod+t       no_op
map kitty_mod+t       new_tab_with_cwd

#:     map ctrl+alt+1 goto_tab 1
#:     map ctrl+alt+2 goto_tab 2

#: }}}

#: Layout management {{{

# map kitty_mod+l next_layout

#: You can also create shortcuts to switch to specific layouts::

map kitty_mod+0 no_op
map kitty_mod+0 goto_layout stack
map kitty_mod+9 no_op
map kitty_mod+9 goto_layout tall
map kitty_mod+8 no_op
map kitty_mod+8 goto_layout fat
#:     map ctrl+alt+t goto_layout tall
#:     map ctrl+alt+s goto_layout stack


#: Similarly, to switch back to the previous layout::

#:    map ctrl+alt+p last_used_layout

#: }}}

#: Select and act on visible text {{{

map kitty_mod+e kitten hints

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

# map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

# map kitty_mod+p>shift+f kitten hints --type path

#: Select a path/filename and open it with the default open program.

# map kitty_mod+p>l kitten hints --type line --program -

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

# map kitty_mod+p>w kitten hints --type word --program -

#: Select words and insert into terminal.

# map kitty_mod+p>h kitten hints --type hash --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits


#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.
#: }}}

#: Miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+u      input_unicode_character
map kitty_mod+f2     edit_config_file
# map kitty_mod+escape kitty_shell window

#: Open the kitty shell in a new window/tab/overlay/os_window to
#: control kitty using commands.

# map kitty_mod+a>m set_background_opacity +0.1
# map kitty_mod+a>l set_background_opacity -0.1
# map kitty_mod+a>1 set_background_opacity 1
# map kitty_mod+a>d set_background_opacity default

#: You can create shortcuts to clear/reset the terminal. For example::

#:     # Reset the terminal
#:     map kitty_mod+f9 clear_terminal reset active
#:     # Clear the terminal screen by erasing all contents
#:     map kitty_mod+f10 clear_terminal clear active
#:     # Clear the terminal scrollback by erasing it
#:     map kitty_mod+f11 clear_terminal scrollback active
#:     # Scroll the contents of the screen into the scrollback
#:     map kitty_mod+f12 clear_terminal scroll active

#: If you want to operate on all windows instead of just the current
#: one, use all instead of active.

#: It is also possible to remap Ctrl+L to both scroll the current
#: screen contents into the scrollback buffer and clear the screen,
#: instead of just clearing the screen::

#:     map ctrl+l combine : clear_terminal scroll active : send_text normal,application \x0c


#: You can tell kitty to send arbitrary (UTF-8) encoded text to the
#: client program when pressing specified shortcut keys. For example::

#:     map ctrl+alt+a send_text all Special text

#: This will send "Special text" when you press the ctrl+alt+a key
#: combination.  The text to be sent is a python string literal so you
#: can use escapes like \x1b to send control codes or \u21fb to send
#: unicode characters (or you can just input the unicode characters
#: directly as UTF-8 text). The first argument to send_text is the
#: keyboard modes in which to activate the shortcut. The possible
#: values are normal or application or kitty or a comma separated
#: combination of them.  The special keyword all means all modes. The
#: modes normal and application refer to the DECCKM cursor key mode
#: for terminals, and kitty refers to the special kitty extended
#: keyboard protocol.

#: Another example, that outputs a word and then moves the cursor to
#: the start of the line (same as pressing the Home key)::

#:     map ctrl+alt+a send_text normal Word\x1b[H
#:     map ctrl+alt+a send_text application Word\x1bOH

#: }}}

map ctrl+space send_text all \x10

# }}}
